generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()"))
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ApiToken {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamp(6)
  name       String    @unique
  access     ApiAccess
}

model Equation {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String                @db.VarChar(255)
  user_id             String?               @db.Uuid
  team_id             String?               @db.Uuid
  elo_contribute      Int                   @default(0)
  content             Json                  @default("null") @db.Json
  Team                Team?                 @relation(fields: [team_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  User                User?                 @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  TeamInEquationMatch TeamInEquationMatch[]
}

model EquationMatch {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type                String                @default("Casual")
  timestamp           DateTime?             @db.Timestamp(6)
  TeamInEquationMatch TeamInEquationMatch[]
}

model Job {
  id        String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime          @default(now()) @db.Timestamp(6)
  team_id   String            @db.Uuid
  payload   String
  status    enums_jobs_status
  error     String?
  Team      Team              @relation(fields: [team_id], references: [id], onUpdate: Restrict, map: "fk_user_team_id")
}

model Session {
  expires      DateTime
  sessionToken String   @unique
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String   @db.Uuid
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String                @unique @db.VarChar(255)
  eq_elo              Int                   @default(1000)
  trained_elo         Int                   @default(1000)
  totalEqMatches      Int                   @default(0)
  totalEqMatchesWon   Int                   @default(0)
  totalEqMatchesLost  Int                   @default(0)
  mu                  Decimal?              @default(25) @db.Decimal
  sigma               Decimal?              @default(8.3333333333) @db.Decimal
  ranking             Decimal?              @db.Decimal
  Equation            Equation[]
  Job                 Job[]
  TeamEqEloHistory    TeamEqEloHistory[]
  TeamInEquationMatch TeamInEquationMatch[]
  User                User[]
}

model TeamInEquationMatch {
  equationMatchId String        @db.Uuid
  teamId          String        @db.Uuid
  score           Int?          @default(0)
  equationID      String        @db.Uuid
  winner          Boolean?      @default(false)
  id              String        @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mu_after        Decimal?      @db.Decimal
  sigma_after     Decimal?      @db.Decimal
  mu_before       Decimal?      @db.Decimal
  sigma_before    Decimal?      @db.Decimal
  Equation        Equation      @relation(fields: [equationID], references: [id])
  EquationMatch   EquationMatch @relation(fields: [equationMatchId], references: [id])
  Team            Team          @relation(fields: [teamId], references: [id])
}

model User {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String     @unique @db.VarChar(255)
  epic_id       String?    @unique @db.VarChar(255)
  email         String?    @unique
  image         String?
  team_id       String?    @db.Uuid
  emailVerified DateTime?
  discord_id    String     @default(dbgenerated("('@'::text || (name)::text)")) @db.VarChar(255)
  Account       Account[]
  Equation      Equation[]
  Session       Session[]
  Team          Team?      @relation(fields: [team_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TeamEqEloHistory {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  teamId    String   @db.Uuid
  elo       Int
  timestamp DateTime @db.Timestamp(6)
  Team      Team     @relation(fields: [teamId], references: [id], onUpdate: Restrict)
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view TeamView {
  team_id         String  @id @db.Uuid
  name            String? @db.VarChar(255)
  eq_elo          Int?
  trained_elo     Int?
  eqmatcheswon    BigInt?
  eqmatcheslost   BigInt?
  eqmatchesplayed BigInt?
}

enum ApiAccess {
  READONLY
  READWRITE
  READWRITEDELETE
  ADMIN
}

enum enums_jobs_status {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
