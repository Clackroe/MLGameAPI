generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model match {
  id               String    @id @db.Uuid
  team_1           String    @db.Uuid
  team_1_model     String    @db.Uuid
  team_2           String    @db.Uuid
  team_2_model     String    @db.Uuid
  type             String    @db.VarChar(255)
  timestamp        DateTime? @db.Timestamp(6)
  team_1_score     Int?
  team_2_score     Int?
  winning_team_id  String?   @db.Uuid
  winning_model_id String?   @db.Uuid
  team1            team      @relation("matchesAsTeam1", fields: [team_1], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modelAsTeam1     model     @relation("matchesAsTeam1", fields: [team_1_model], references: [id], onDelete: NoAction, onUpdate: NoAction)
  team2            team      @relation("matchesAsTeam2", fields: [team_2], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modelAsTeam2     model     @relation("matchesAsTeam2", fields: [team_2_model], references: [id], onDelete: NoAction, onUpdate: NoAction)
  winningTeam      team?     @relation("matchesAsWinningModel", fields: [winning_team_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "match_winner_fkey")
  winningModel     model?    @relation("matchesAsWinningModel", fields: [winning_model_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "match_winning_model_fkey")
}

model model {
  id                    String  @id @db.Uuid
  team_id               String  @db.Uuid
  name                  String  @db.VarChar(255)
  url                   String  @db.VarChar(255)
  matchesAsTeam1        match[] @relation("matchesAsTeam1")
  matchesAsTeam2        match[] @relation("matchesAsTeam2")
  matchesAsWinningModel match[] @relation("matchesAsWinningModel")
  team                  team    @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_model_team_id")
}

model team {
  id                    String  @id @db.Uuid
  name                  String  @unique @db.VarChar(255)
  matchesAsTeam1        match[] @relation("matchesAsTeam1")
  matchesAsTeam2        match[] @relation("matchesAsTeam2")
  matchesAsWinningModel match[] @relation("matchesAsWinningModel")
  models                model[]
  users                 user[]
}

model user {
  id         String  @id @db.Uuid
  discord_id String  @unique @db.VarChar(255)
  epic_id    String  @unique @db.VarChar(255)
  team_id    String? @db.Uuid
  name       String? @db.VarChar(255)
  team       team?   @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_team_id")
}

model token {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamp(6)
  name      String   @unique
  }
